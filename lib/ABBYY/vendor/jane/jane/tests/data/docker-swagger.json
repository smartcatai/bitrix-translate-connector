
{
    "swagger": "2.0",
    "info": {
        "title": "Docker Remote API",
        "description": "The API for each docker installation.",
        "termsOfService": "http://example.com/tos/",
        "version": "v1.19"
    },
    "host": "unix:///var/run/docker.sock",
    "basePath": "/",
    "schemes": [
        "unix",
        "http",
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "definitions": {
        "version": {
            "type": "object",
            "properties": {
                "Version": { "type": "string" },
                "Os": { "type": "string" },
                "KernelVersion": { "type": "string" },
                "GoVersion": { "type": "string" },
                "GitCommit": { "type": "string" },
                "Arch": { "type": "string" },
                "ApiVersion": { "type": "string" }
            }
        },
        "port": {
            "type": "object",
            "properties": {
                "PrivatePort": { "type": "integer" },
                "PublicPort": { "type": "integer" },
                "Type": { "type": "string" }
            }
        },
        "container": {
            "type": "object",
            "properties": {
                "Id": { "type": "string" },
                "Names": { "type": "array", "items": { "type": "string" } },
                "Image": { "type": "string" },
                "Command": { "type": "string" },
                "Created": { "type": "integer" },
                "Status": { "type": "string" },
                "Ports": { "type": "array", "items": { "$ref": "#/definitions/port" } },
                "Labels": { "type": "object", "additionalProperties": { "type": "string" } },
                "SizeRw": { "type": "integer" },
                "SizeRootFs": { "type": "integer" }
            }
        }
    },
    "paths": {
        "/containers/json": {
            "get":  {
                "summary": "List containers",
                "description": "List containers",
                "operationId": "getContainers",
                "responses": {
                    "200": {
                        "description": "no error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/container"
                            }
                        }
                    },
                    "400": {
                        "description": "bad parameter"
                    },
                    "500": {
                        "description": "server error"
                    }
                },
                "tags": [
                    "Container"
                ]
            }
        },
        "/version": {
            "get": {
                "summary": "Show the docker version information",
                "description": "Show the docker version information",
                "operationId": "getVersion",
                "responses": {
                    "200": {
                        "description": "no error",
                        "schema": { "$ref": "#/definitions/version" }
                    },
                    "500": {
                        "description": "server error"
                    }
                },
                "tags": [
                    "Misc"
                ]
            }
        },
        "/build": {
            "post": {
                "summary": "Build an image from Dockerfile via stdin",
                "description": "Build an image from Dockerfile via stdin",
                "operationId": "build",
                "parameters": [
                    {
                        "name": "inputStream",
                        "in": "body",
                        "description": "The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dockerfile",
                        "in": "query",
                        "description": "Path within the build context to the Dockerfile. This is ignored if remote is specified and points to an individual filename.",
                        "type": "string"
                    },
                    {
                        "name": "t",
                        "in": "query",
                        "description": "A repository name (and optionally a tag) to apply to the resulting image in case of success.",
                        "type": "string"
                    },
                    {
                        "name": "remote",
                        "in": "query",
                        "description": "A Git repository URI or HTTP/HTTPS URI build source. If the URI specifies a filename, the fileâ€™s contents are placed into a file called Dockerfile.",
                        "type": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Suppress verbose build output.",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "nocache",
                        "in": "query",
                        "description": "Do not use the cache when building the image.",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "pull",
                        "in": "query",
                        "description": "Attempt to pull the image even if an older image exists locally",
                        "type": "string"
                    },
                    {
                        "name": "rm",
                        "in": "query",
                        "description": "Remove intermediate containers after a successful build (default behavior).",
                        "type": "boolean",
                        "default": true
                    },
                    {
                        "name": "forcerm",
                        "in": "query",
                        "description": "always remove intermediate containers (includes rm)Request Headers:",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "Content-type",
                        "in": "header",
                        "description": " Set to 'application/tar'.",
                        "type": "string",
                        "enum": ["application/tar"],
                        "default": "application/tar"
                    },
                    {
                        "name": "X-Registry-Config",
                        "in": "header",
                        "description": "base64-encoded ConfigFile object",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "no error"
                    },
                    "500": {
                        "description": "server error"
                    }
                },
                "tags": [
                    "Image"
                ]
            }
        }
    }
}
